'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, Upload } from 'lucide-react';
import { BatchGradingResults } from '@/components/grading/BatchGradingResults';
import { PDFViewer } from '@/components/grading/PDFViewer';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { toast } from '@/components/ui/use-toast';
import { FileRecord } from '@/types/database';

export default function BatchGradingPage() {
  const [teacherFile, setTeacherFile] = useState<File | null>(null);
  const [studentFiles, setStudentFiles] = useState<FileRecord[]>([]);
  const [selectedStudentIds, setSelectedStudentIds] = useState<string[]>([]);
  const [isGrading, setIsGrading] = useState(false);
  const [gradingResults, setGradingResults] = useState<any[]>([]);
  const [assignmentId, setAssignmentId] = useState<string>("default-assignment"); // จะได้จาก URL params ในอนาคต

  const supabase = createClientComponentClient();

  // โหลดไฟล์นักเรียนที่อัปโหลดในระบบ
  useEffect(() => {
    async function fetchStudentFiles() {
      try {
        const { data, error } = await supabase
          .from('files')
          .select('*')
          .eq('file_type', 'student')
          .eq('assignment_id', assignmentId);

        if (error) throw error;
        setStudentFiles(data || []);
      } catch (error) {
        console.error('Error fetching student files:', error);
        toast({
          title: 'Error',
          description: 'Failed to load student files.',
          variant: 'destructive',
        });
      }
    }

    fetchStudentFiles();
  }, [assignmentId, supabase]);

  // จัดการเลือก/ยกเลิกการเลือกไฟล์นักเรียนทั้งหมด
  const toggleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedStudentIds(studentFiles.map(file => file.id));
    } else {
      setSelectedStudentIds([]);
    }
  };

  // จัดการเลือก/ยกเลิกการเลือกไฟล์นักเรียนแต่ละคน
  const toggleSelectStudent = (id: string, checked: boolean) => {
    if (checked) {
      setSelectedStudentIds(prev => [...prev, id]);
    } else {
      setSelectedStudentIds(prev => prev.filter(fileId => fileId !== id));
    }
  };

  // เริ่มกระบวนการตรวจงาน
  const handleStartGrading = async () => {
    if (!teacherFile || selectedStudentIds.length === 0) {
      toast({
        title: 'Warning',
        description: 'Please upload a teacher file and select at least one student submission.',
        variant: 'default',
      });
      return;
    }

    setIsGrading(true);
    setGradingResults([]);

    try {
      // สร้าง FormData สำหรับส่งไฟล์ของอาจารย์
      const formData = new FormData();
      formData.append('teacher_file', teacherFile);
      formData.append('assignment_id', assignmentId);

      // ส่งไปที่ backend API
      const response = await fetch('/api/v1/batch-grading', {
        method: 'POST',
        body: formData,
        headers: {
          // ไม่ต้องกำหนด Content-Type เพราะ FormData จะจัดการเอง
        },
      });

      if (!response.ok) {
        throw new Error('Failed to start batch grading');
      }

      const result = await response.json();
      
      if (result.success) {
        const batchId = result.batch_id;
        
        // ส่ง API อีกครั้งเพื่อระบุรายการนักเรียนที่ต้องการตรวจ
        const batchResponse = await fetch(`/api/v1/batch-grading/${batchId}/students`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            student_file_ids: selectedStudentIds,
          }),
        });

        if (!batchResponse.ok) {
          throw new Error('Failed to assign students to batch');
        }

        // สมมติว่ามีการโพลล์ API เพื่อตรวจสอบสถานะ
        // แต่เพื่อให้ง่าย เราจะสมมติว่าได้ผลลัพธ์ทันที
        const mockResults = selectedStudentIds.map(id => {
          const student = studentFiles.find(file => file.id === id);
          return {
            student_id: id,
            student_name: student?.student_name || 'Unknown',
            score: Math.floor(Math.random() * 41) + 60, // สุ่มคะแนน 60-100
            feedback: 'This is automated feedback generated by LLM.',
            graded_at: new Date().toISOString(),
          };
        });
        
        setGradingResults(mockResults);
      }
    } catch (error) {
      console.error('Error during batch grading:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to complete batch grading',
        variant: 'destructive',
      });
    } finally {
      setIsGrading(false);
    }
  };

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Batch Grade Assignments</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <PDFViewer
          title="Teacher's Answer Key"
          fileType="teacher"
          assignmentId={assignmentId}
          onFileUpload={(file) => setTeacherFile(file)}
        />
        
        <Card>
          <CardHeader>
            <CardTitle>Student Submissions</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-12">
                      <Checkbox 
                        checked={studentFiles.length > 0 && selectedStudentIds.length === studentFiles.length}
                        onCheckedChange={(checked) => toggleSelectAll(!!checked)}
                      />
                    </TableHead>
                    <TableHead>Student Name</TableHead>
                    <TableHead>File Name</TableHead>
                    <TableHead>Upload Date</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {studentFiles.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={4} className="text-center py-6 text-muted-foreground">
                        No student submissions found
                      </TableCell>
                    </TableRow>
                  ) : (
                    studentFiles.map((file) => (
                      <TableRow key={file.id}>
                        <TableCell>
                          <Checkbox 
                            checked={selectedStudentIds.includes(file.id)}
                            onCheckedChange={(checked) => toggleSelectStudent(file.id, !!checked)}
                          />
                        </TableCell>
                        <TableCell>{file.student_name || 'Unknown'}</TableCell>
                        <TableCell>{file.file_name}</TableCell>
                        <TableCell>{new Date(file.created_at).toLocaleDateString()}</TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="flex justify-center">
        <Button
          size="lg"
          disabled={!teacherFile || selectedStudentIds.length === 0 || isGrading}
          onClick={handleStartGrading}
        >
          {isGrading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          Start Batch Grading
        </Button>
      </div>

      {gradingResults.length > 0 && (
        <BatchGradingResults results={gradingResults} />
      )}
    </div>
  );
}